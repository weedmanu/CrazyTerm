"""
Fen√™tre principale de CrazySerialTerm - Version S√©rie Simple
Ce module contient la classe principale de l'interface utilisateur s√©rie uniquement.

Classes :
    Terminal : Fen√™tre principale de l'application, interface graphique et gestion des √©v√©nements s√©rie.
"""

from __future__ import annotations

import os
import re
import logging
from datetime import datetime
from typing import List, Dict, Any, Optional

from PyQt5.QtWidgets import (QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, QTextEdit,
                            QTabWidget, QStatusBar, QLabel, QMenu, QAction,
                            QFontDialog, QFileDialog,
                            QPushButton, QShortcut, QLineEdit, QComboBox, QGroupBox,
                            QCheckBox, QSpinBox, QGridLayout, QInputDialog, QMenuBar)
from PyQt5.QtGui import QColor, QTextCursor, QFont, QKeySequence, QTextCharFormat, QCloseEvent
from PyQt5.QtCore import Qt, QSettings, QTimer

from communication.serial_communication import RobustSerialManager
from interface.interface_components import (ConnectionPanel, InputPanel, AdvancedSettingsPanel)
from core.config_manager import SettingsManager
from interface.theme_manager import apply_theme
from tools.tool_checksum import ChecksumCalculator
from tools.tool_converter import DataConverter
from system.memory_optimizer import get_ultra_memory_manager

logger = logging.getLogger("CrazySerialTerm")

class Terminal(QMainWindow):
    """
    Terminal de communication s√©rie simple avec interface graphique.
    Fen√™tre principale de l'application.
    """
    
    # Constantes de classe
    PORT_CHECK_INTERVAL = 5000  # ms
    
    def __init__(self) -> None:
        """
        Initialise la fen√™tre principale, les composants, les timers et l'interface utilisateur.
        """
        super().__init__()
        
        # Initialisation des composants
        self.serial_manager = RobustSerialManager()
        self.settings_manager = SettingsManager()
        
        # Gestionnaire m√©moire ultra-optimis√©
        self.ultra_memory = get_ultra_memory_manager()
        
        # Buffer des couleurs pour l'optimisation m√©moire
        self._color_buffer: List[str] = []
        
        # Cache des formats de texte pour optimisation
        self._text_format_cache: Dict[str, Any] = {}
        
        # Configuration de base
        self.command_history: List[str] = []
        self.history_index: int = -1
        self.settings = QSettings("SerialTerminal", "Settings")
        self.log_file = None
        self.rx_bytes_count: int = 0
        self.tx_bytes_count: int = 0
        self.last_receive_time: Optional[datetime] = None
        
        # Interfaces utilisateur
        self.serial_panel: Optional[Any] = None
        self.input_panel: Optional[Any] = None
        self.advanced_panel: Optional[Any] = None
        
        # Terminal
        self.terminal_output: Optional[Any] = None
        self.tab_widget: Optional[Any] = None
        
        # Th√®me actuel
        self.current_theme = 'sombre'  # Th√®me par d√©faut
        
        # Timer ultra-optimis√© pour flush
        self._ultra_flush_timer = QTimer()
        self._ultra_flush_timer.timeout.connect(self._ultra_flush_buffer)
        self._ultra_flush_timer.start(200)  # Flush moins fr√©quent
        
        # Limite stricte de m√©moire
        self._max_terminal_chars = 30000  # Limite ultra-stricte
        
        # Outils
        self.checksum_calculator = ChecksumCalculator()
        self.data_converter = DataConverter()
        
        # Timer pour l'envoi r√©p√©t√©
        self.repeat_timer = QTimer()
        self.repeat_timer.timeout.connect(self.send_data)
        
        # Configuration de l'interface
        self.setupUI()
        self.setupMenus()  # Doit √™tre appel√© avant self.show() pour PyQt5
        self.setupStatusBar()
        self.setupShortcuts()
        self.connectSignals()

        # Timer pour v√©rifier les ports
        self.port_timer = QTimer()
        self.port_timer.timeout.connect(self.refresh_ports)
        self.port_timer.start(self.PORT_CHECK_INTERVAL)

        # Chargement des param√®tres
        self.load_settings()

        # Appliquer les couleurs du terminal apr√®s initialisation
        self.apply_terminal_colors()

        # Affichage de la fen√™tre
        self.show()

        logger.info("Initialisation du terminal s√©rie")
    
    def setupUI(self) -> None:
        """
        Configure l'interface utilisateur principale (onglets, panneaux, widgets).
        """
        self.setWindowTitle("CrazySerialTerm - Terminal S√©rie")
        self.setGeometry(100, 100, 1200, 800)
        
        # Widget central avec onglets
        self.tab_widget = QTabWidget()
        self.setCentralWidget(self.tab_widget)
        # Cr√©ation explicite de la barre de menu (robustesse PyQt)
        if self.menuBar() is None:
            self.setMenuBar(QMenuBar(self))
        
        # Onglet principal avec terminal s√©rie
        main_widget = QWidget()
        main_layout = QVBoxLayout(main_widget)
        
        # Panneau de connexion s√©rie
        self.serial_panel = ConnectionPanel()
        main_layout.addWidget(self.serial_panel)
        
        # Sortie du terminal
        self.terminal_output = QTextEdit()
        self.terminal_output.setReadOnly(True)
        self.terminal_output.setFont(QFont("Consolas", 10))
        main_layout.addWidget(self.terminal_output)
        
        # Panneau d'entr√©e
        self.input_panel = InputPanel()
        main_layout.addWidget(self.input_panel)
        
        # Ajouter l'onglet principal
        self.tab_widget.addTab(main_widget, "üîå Terminal S√©rie")
        
        # Onglet des param√®tres avanc√©s (cr√©√© mais pas encore ajout√©)
        self.advanced_panel = AdvancedSettingsPanel()
        self.settings_tab_visible = False  # √âtat par d√©faut : masqu√©
        self.settings_tab_index = None  # Index de l'onglet param√®tres
        # L'onglet sera ajout√© dans load_settings() selon les pr√©f√©rences
    
    def setupMenus(self) -> None:
        """
        Configure les menus de l'application (Terminal, Affichage, Outils, Th√®mes).
        """
        # S'assurer que la barre de menu existe
        menubar = self.menuBar()
        if menubar is None:
            self.setMenuBar(QMenuBar(self))
            menubar = self.menuBar()
        if menubar is None:
            raise RuntimeError("Impossible d'initialiser la barre de menu (QMenuBar)")
        # Menu Terminal
        terminal_menu = menubar.addMenu('Terminal')
        if terminal_menu is None:
            raise RuntimeError("Impossible de cr√©er le menu 'Terminal' (QMenu)")
        connect_action = QAction('Connecter', self)
        connect_action.setShortcut('Ctrl+O')
        connect_action.triggered.connect(self.connect_serial)
        terminal_menu.addAction(connect_action)
        disconnect_action = QAction('D√©connecter', self)
        disconnect_action.setShortcut('Ctrl+D')
        disconnect_action.triggered.connect(self.disconnect_serial)
        terminal_menu.addAction(disconnect_action)
        terminal_menu.addSeparator()
        clear_action = QAction('Effacer', self)
        clear_action.setShortcut('Ctrl+L')
        clear_action.triggered.connect(self.clear_terminal)
        terminal_menu.addAction(clear_action)
        # Menu Affichage
        view_menu = menubar.addMenu('Affichage')
        if view_menu is None:
            raise RuntimeError("Impossible de cr√©er le menu 'Affichage' (QMenu)")
        self.toggle_send_panel_action = QAction('Afficher le panneau d\'envoi', self)
        self.toggle_send_panel_action.setCheckable(True)
        self.toggle_send_panel_action.setShortcut('Ctrl+T')
        self.toggle_send_panel_action.setChecked(True)
        self.toggle_send_panel_action.triggered.connect(self.toggle_send_panel_visibility)
        view_menu.addAction(self.toggle_send_panel_action)
        self.toggle_settings_tab_action = QAction('Afficher l\'onglet param√®tres', self)
        self.toggle_settings_tab_action.setCheckable(True)
        self.toggle_settings_tab_action.setShortcut('Ctrl+Shift+S')
        self.toggle_settings_tab_action.setChecked(False)
        self.toggle_settings_tab_action.triggered.connect(self.toggle_settings_tab_visibility)
        view_menu.addAction(self.toggle_settings_tab_action)
        view_menu.addSeparator()
        themes_menu = view_menu.addMenu('Th√®mes')
        if themes_menu is None:
            raise RuntimeError("Impossible de cr√©er le menu 'Th√®mes' (QMenu)")
        light_theme_action = QAction('Th√®me clair', self)
        light_theme_action.triggered.connect(lambda: self.apply_theme('clair'))
        themes_menu.addAction(light_theme_action)
        dark_theme_action = QAction('Th√®me sombre', self)
        dark_theme_action.triggered.connect(lambda: self.apply_theme('sombre'))
        themes_menu.addAction(dark_theme_action)
        hacker_theme_action = QAction('Th√®me hacker', self)
        hacker_theme_action.triggered.connect(lambda: self.apply_theme('hacker'))
        themes_menu.addAction(hacker_theme_action)
        view_menu.addSeparator()
        font_action = QAction('Changer la police du terminal...', self)
        font_action.triggered.connect(self.change_font)
        view_menu.addAction(font_action)
        reset_view_action = QAction('R√©initialiser l\'apparence', self)
        reset_view_action.setToolTip("R√©initialise l'apparence au th√®me sombre par d√©faut")
        reset_view_action.triggered.connect(self.reset_config)
        view_menu.addAction(reset_view_action)
        # Menu Outils
        tools_menu = menubar.addMenu('Outils')
        if tools_menu is None:
            raise RuntimeError("Impossible de cr√©er le menu 'Outils' (QMenu)")
        checksum_action = QAction('Calculateur de Checksum', self)
        checksum_action.triggered.connect(self.show_checksum_calculator)
        tools_menu.addAction(checksum_action)
        converter_action = QAction('Convertisseur de Donn√©es', self)
        converter_action.triggered.connect(self.show_data_converter)
        tools_menu.addAction(converter_action)
    
    def setupStatusBar(self) -> None:
        """
        Configure la barre de statut de l'application.
        """
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        # Labels de statut
        self.connection_status_label = QLabel("D√©connect√©")
        self.port_label = QLabel("Aucun port")
        self.bytes_label = QLabel("Octets: 0 ‚Üë / 0 ‚Üì")
        
        self.status_bar.addWidget(self.connection_status_label)
        self.status_bar.addPermanentWidget(self.port_label)
        self.status_bar.addPermanentWidget(self.bytes_label)
    
    def connectSignals(self) -> None:
        """
        Connecte tous les signaux n√©cessaires de mani√®re thread-safe.
        """
        try:
            # Signaux du panneau s√©rie
            self.serial_panel.connect_requested.connect(self.connect_serial)
            self.serial_panel.disconnect_requested.connect(self.disconnect_serial)
            self.serial_panel.refresh_requested.connect(self.refresh_ports)
            self.serial_panel.clear_requested.connect(self.clear_terminal)
            
            # Signaux du panneau d'entr√©e
            self.input_panel.send_requested.connect(self.send_data)
            
            # Signaux du panneau des param√®tres avanc√©s
            self.advanced_panel.send_settings_changed.connect(self.on_send_settings_changed)
            self.advanced_panel.display_settings_changed.connect(self.on_display_settings_changed)
            self.advanced_panel.serial_settings_changed.connect(self.on_serial_settings_changed)
            
            # Signaux du gestionnaire s√©rie robuste - Thread-safe via Qt
            self.serial_manager.data_received.connect(self.on_data_received, Qt.QueuedConnection)
            self.serial_manager.connection_changed.connect(self.on_connection_changed, Qt.QueuedConnection)
            self.serial_manager.error_occurred.connect(self.on_error_occurred, Qt.QueuedConnection)
            self.serial_manager.statistics_updated.connect(self.on_statistics_updated, Qt.QueuedConnection)
            
            logger.debug("Tous les signaux connect√©s avec succ√®s")
            
        except Exception as e:
            logger.error(f"Erreur lors de la connexion des signaux: {e}")
            raise
    
    def connect_serial(self) -> None:
        """
        √âtablit la connexion s√©rie √† partir des param√®tres du panneau de connexion.
        """
        try:
            params = self.serial_panel.get_connection_params()
            if self.serial_manager.connect(params['port'], baudrate=params['baudrate']):
                self.append_text(f"[Syst√®me] Connect√© au port {params['port']} √† {params['baudrate']} bauds\n", 'system')
                self.serial_panel.set_connected(True)
            else:
                self.append_text("[Syst√®me] √âchec de la connexion s√©rie\n", 'error')
        except Exception as e:
            self.append_text(f"[Syst√®me] Erreur de connexion: {str(e)}\n", 'error')
            logger.error(f"Erreur de connexion s√©rie: {str(e)}")
    
    def disconnect_serial(self) -> None:
        """
        Ferme la connexion s√©rie et met √† jour l'interface.
        """
        try:
            self.serial_manager.disconnect_port()
            self.append_text("[Syst√®me] D√©connect√©\n", 'system')
            self.serial_panel.set_connected(False)
        except Exception as e:
            self.append_text(f"[Syst√®me] Erreur de d√©connexion: {str(e)}\n", 'error')
            logger.error(f"Erreur de d√©connexion s√©rie: {str(e)}")
    
    def send_data(self, data: str, format_type: str = 'text') -> None:
        """
        Envoie des donn√©es via la connexion s√©rie.
        Args:
            data (str): Donn√©es √† envoyer.
            format_type (str): Format d'envoi ('text' ou 'hex').
        """
        if not self.serial_manager.is_connected():
            self.append_text("[Syst√®me] Aucune connexion active\n", 'system')
            return
        
        # Validation des donn√©es d'entr√©e
        if not data or not isinstance(data, str):
            self.append_text("[Syst√®me] Donn√©es invalides\n", 'error')
            return
        
        if len(data) > 1024: # Limite de taille
            self.append_text("[Syst√®me] Donn√©es trop longues (max 1024 caract√®res)\n", 'error')
            return
        
        try:
            # R√©cup√©rer les param√®tres d'envoi avanc√©s si activ√©s
            if self.advanced_panel.send_group.isChecked():
                send_settings = self.advanced_panel.get_send_settings()
                # Utiliser le format d√©fini dans les param√®tres
                format_type = send_settings.get('format', 'ASCII').lower()
                if format_type == 'ascii':
                    format_type = 'text'
                elif format_type == 'hex':
                    format_type = 'hex'
                
                # Ajouter la fin de ligne si d√©finie
                eol = send_settings.get('eol', 'Aucun')
                if eol == 'NL':
                    data += '\n'
                elif eol == 'CR':
                    data += '\r'
                elif eol == 'NL+CR':
                    data += '\r\n'
            
            # Convertir les donn√©es selon le format
            if format_type == 'hex':
                # Traitement hexad√©cimal
                try:
                    # Nettoyer la cha√Æne hex et la convertir en bytes
                    hex_data = data.replace(' ', '').replace('0x', '')
                    data_bytes = bytes.fromhex(hex_data)
                except ValueError:
                    self.append_text("Format hexad√©cimal invalide\n", 'error')
                    return
            else:
                # Format texte/ASCII
                data_bytes = data.encode('utf-8')
            
            success = self.serial_manager.send_data(data_bytes)
            if success:
                # Mettre √† jour le compteur d'octets envoy√©s
                self.update_bytes_counter(sent=len(data_bytes))
                
                # Afficher les donn√©es envoy√©es avec le format de l'original (TX:)
                timestamp = ""
                if self.advanced_panel.display_group.isChecked():
                    display_settings = self.advanced_panel.get_display_settings()
                    if display_settings.get('timestamp', False):
                        from datetime import datetime
                        timestamp = f"[{datetime.now().strftime('%H:%M:%S')}] "
                
                display_data = data if format_type == 'text' else f"[{format_type.upper()}] {data}"
                self.append_text(f"{timestamp}TX: {display_data}\n", 'sent')
                
                # Effacer le champ d'entr√©e apr√®s envoi
                self.input_panel.clear_input()
            else:
                self.append_text("√âchec de l'envoi des donn√©es\n", 'error')
        except Exception as e:
            self.append_text(f"Erreur d'envoi: {str(e)}\n", 'error')
            logger.error(f"Erreur d'envoi de donn√©es: {str(e)}")
    
    # Correction des signatures et docstrings pour les derni√®res m√©thodes publiques
    def on_data_received(self, data: bytes) -> None:
        """
        Traite les donn√©es re√ßues du port s√©rie.
        Args:
            data (bytes): Donn√©es re√ßues.
        Returns:
            None
        """
        try:
            # D√©codage des donn√©es
            text: str = data.decode('utf-8', errors='replace')

            # Nettoyage complet du texte
            clean_text: str = self.clean_received_text(text)

            # Afficher le texte re√ßu directement sans pr√©fixe, comme dans l'original
            self.append_text(clean_text, 'received')

            # Mise √† jour des statistiques
            self.update_bytes_counter(received=len(data))
        except Exception as e:
            logger.error(f"Erreur de traitement des donn√©es re√ßues: {str(e)}")
            raise

    def clean_received_text(self, text: str) -> str:
        """
        Nettoie le texte re√ßu en supprimant les caract√®res ind√©sirables et s√©quences ANSI.
        Args:
            text (str): Texte √† nettoyer.
        Returns:
            str: Texte nettoy√©.
        """
        # Liste des caract√®res √† supprimer
        chars_to_remove = [
            '‚Üê',     # Caract√®re fl√®che gauche
            '\x08',  # Backspace
            '\x7f',  # Delete
            '\x1b',  # Escape
        ]
        
        # Supprimer chaque caract√®re ind√©sirable
        for char in chars_to_remove:
            text = text.replace(char, '')
        
        # Supprimer les s√©quences d'√©chappement ANSI courantes
        # Supprimer les s√©quences d'√©chappement ANSI (comme \x1b[...)
        text = re.sub(r'\x1b\[[0-9;]*[mK]', '', text)
        
        return text

    def on_connection_changed(self, connected: bool) -> None:
        """
        Traite le changement d'√©tat de connexion s√©rie.
        Args:
            connected (bool): √âtat de connexion.
        Returns:
            None
        """
        try:
            if connected:
                self.connection_status_label.setText("Connect√©")
                self.connection_status_label.setStyleSheet("color: green;")
                port = self.serial_panel.get_connection_params()['port']
                self.port_label.setText(f"Port: {port}")
                # Mettre √† jour le bouton dans le panneau s√©rie
                self.serial_panel.set_connected(True)
            else:
                self.connection_status_label.setText("D√©connect√©")
                self.connection_status_label.setStyleSheet("color: red;")
                self.port_label.setText("Aucun port")
                # Mettre √† jour le bouton dans le panneau s√©rie
                self.serial_panel.set_connected(False)
                # Rafra√Æchir la liste des ports en cas de d√©connexion
                self.refresh_ports()
                
            logger.info(f"√âtat de connexion mis √† jour: {'Connect√©' if connected else 'D√©connect√©'}")
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour de l'√©tat de connexion: {e}")

    def on_error_occurred(self, error_message: str) -> None:
        """
        Traite les erreurs du gestionnaire s√©rie.
        Args:
            error_message (str): Message d'erreur.
        Returns:
            None
        """
        self.append_text(f"[Erreur] {error_message}\n", 'error')
        logger.error(f"Erreur s√©rie: {error_message}")

    def on_statistics_updated(self, stats: Dict[str, Any]) -> None:
        """
        Met √† jour les statistiques affich√©es dans l'interface.
        Args:
            stats (Dict[str, Any]): Dictionnaire contenant les statistiques √† afficher.
        Returns:
            None
        """
        try:
            rx_bytes: int = int(stats.get('rx_bytes', 0))
            tx_bytes: int = int(stats.get('tx_bytes', 0))
            uptime: int = int(stats.get('uptime', 0))
            
            # Synchroniser nos compteurs locaux avec ceux du gestionnaire
            self.rx_bytes_count = rx_bytes
            self.tx_bytes_count = tx_bytes
            
            # Mettre √† jour l'affichage
            uptime_str = f"{int(uptime//3600):02d}:{int((uptime%3600)//60):02d}:{int(uptime%60):02d}"
            
            self.bytes_label.setText(f"Octets: {tx_bytes} ‚Üë / {rx_bytes} ‚Üì | Dur√©e: {uptime_str}")
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des statistiques : {str(e)}")
            raise

    def refresh_ports(self) -> None:
        """
        Rafra√Æchit la liste des ports s√©rie disponibles.
        Returns:
            None
        """
        try:
            ports = self.serial_manager.get_available_ports()
            self.serial_panel.update_ports(ports)
        except Exception as e:
            logger.error(f"Erreur lors du rafra√Æchissement des ports: {str(e)}")

    def clear_terminal(self) -> None:
        """
        Efface le contenu du terminal et optimise la m√©moire.
        Returns:
            None
        """
        if self.terminal_output:
            try:
                # 1. Arr√™ter temporairement le timer de flush
                if hasattr(self, '_update_timer') and self._update_timer.isActive():
                    self._update_timer.stop()
                
                # 2. Vider compl√®tement le buffer sans traitement
                if hasattr(self, '_pending_text_buffer'):
                    self._pending_text_buffer.clear()
                
                # 3. Nettoyage ultra-complet du document
                doc = self.terminal_output.document()
                doc.clear()  # Plus efficace que terminal_output.clear()
                
                # 4. R√©initialiser le pool de curseurs
                self._cursor_pool = None
                self._last_cursor_position = 0
                
                # 5. Nettoyer compl√®tement le cache de formats
                if hasattr(self, '_text_format_cache'):
                    self._text_format_cache.clear()
                
                # 6. Reset compteur d'objets
                self._object_creation_count = 0
                
                # 7. Forcer garbage collection intensif
                import gc
                for _ in range(3):
                    gc.collect()
                
                # 8. Red√©marrer le timer
                if hasattr(self, '_update_timer'):
                    self._update_timer.start(100)
                
                # 9. Ajouter le message de nettoyage (en direct, pas de batching)
                cursor = self.terminal_output.textCursor()
                cursor.movePosition(QTextCursor.End)
                format_obj = self._get_cached_format('system')
                cursor.setCharFormat(format_obj)
                cursor.insertText("[Syst√®me] Terminal effac√© - M√©moire optimis√©e\n")
                
                logger.debug("Nettoyage m√©moire ultra-complet effectu√©")
                
            except Exception as e:
                logger.error(f"Erreur nettoyage ultra-complet: {e}")
                # Fallback: nettoyage basique
                try:
                    self.terminal_output.clear()
                    if hasattr(self, '_text_format_cache'):
                        self._text_format_cache.clear()
                    if hasattr(self, '_pending_text_buffer'):
                        self._pending_text_buffer.clear()
                except:
                    pass
    
    def _direct_append_text(self, text: str, color: str = 'text') -> None:
        """
        Ajoute du texte directement dans le terminal sans buffer.
        Args:
            text (str): Texte √† ajouter.
            color (str): Couleur √† utiliser.
        Returns:
            None
        """
        if not self.terminal_output:
            return
        try:
            cursor = self.terminal_output.textCursor()
            cursor.movePosition(QTextCursor.End)
            # Appliquer la couleur
            if hasattr(self, '_text_format_cache') and color in self._text_format_cache:
                cursor.setCharFormat(self._text_format_cache[color])
            cursor.insertText(text)
            self.terminal_output.setTextCursor(cursor)
            self.terminal_output.ensureCursorVisible()
        except Exception as e:
            logger.error(f"Erreur dans _direct_append_text: {e}")

    def _flush_text_buffer(self) -> None:
        """
        Flush le buffer de texte avec gestion m√©moire ultra-optimis√©e.
        Returns:
            None
        """
        if not self._pending_text_buffer or not self.terminal_output:
            return
        try:
            # Surveillance proactive de la m√©moire
            self._monitor_memory_usage()
            # Utilisation d'un curseur r√©utilisable
            if not self._cursor_pool:
                self._cursor_pool = self.terminal_output.textCursor()
            cursor = self._cursor_pool
            cursor.movePosition(QTextCursor.End)
            # Optimisation: une seule transaction pour tout le batch
            cursor.beginEditBlock()
            try:
                # Traitement ultra-optimis√©
                current_format = None
                for text, color in self._pending_text_buffer:
                    # Optimisation: ne changer le format que si n√©cessaire
                    new_format = self._get_cached_format(color)
                    if new_format != current_format:
                        cursor.setCharFormat(new_format)
                        current_format = new_format
                    cursor.insertText(text)
                    self._object_creation_count += 1
            finally:
                cursor.endEditBlock()
            # Mise √† jour du curseur position (optimisation)
            self._last_cursor_position = cursor.position()
            self.terminal_output.setTextCursor(cursor)
            self.terminal_output.ensureCursorVisible()
            # Nettoyage du buffer
            self._pending_text_buffer.clear()
        except Exception as e:
            logger.error(f"Erreur dans flush_text_buffer optimis√©: {e}")
            self._pending_text_buffer.clear()

    def _monitor_memory_usage(self) -> None:
        """
        Surveillance et nettoyage proactif de la m√©moire.
        Returns:
            None
        """
        try:
            # V√©rifier la taille du document
            if self.terminal_output:
                doc = self.terminal_output.document()
                char_count = doc.characterCount()
                # Nettoyage agressif si n√©cessaire
                if char_count > self._max_terminal_chars * self._cleanup_threshold:
                    self._aggressive_cleanup()
                # Nettoyage du cache si trop gros
                if len(self._text_format_cache) > 10:
                    self._cleanup_format_cache()
        except Exception as e:
            logger.debug(f"Erreur monitoring m√©moire: {e}")

    def _aggressive_cleanup(self) -> None:
        """
        Nettoyage agressif pour lib√©rer la m√©moire.
        Returns:
            None
        """
        try:
            if not self.terminal_output:
                return
            # Sauvegarder seulement les derni√®res lignes importantes
            doc = self.terminal_output.document()
            total_blocks = doc.blockCount()
            if total_blocks > 200:  # Tr√®s agressif
                # Supprimer tout et garder seulement un message
                self.terminal_output.clear()
                # Nettoyer le cache
                self._text_format_cache.clear()
                self._cursor_pool = None
                # Message de nettoyage
                self._add_single_text("[Syst√®me] Nettoyage m√©moire automatique effectu√©\n", 'system')
                # Forcer garbage collection
                import gc
                gc.collect()
                logger.debug("Nettoyage agressif effectu√©")
        except Exception as e:
            logger.error(f"Erreur nettoyage agressif: {e}")

    def _cleanup_format_cache(self) -> None:
        """
        Nettoie le cache de formats en gardant seulement les essentiels.
        Returns:
            None
        """
        try:
            # Garder seulement les formats du th√®me actuel
            current_theme_keys = [k for k in self._text_format_cache.keys() 
                                if k.startswith(f"{self.current_theme}_")]
            # Nettoyer les anciens formats
            self._text_format_cache = {k: v for k, v in self._text_format_cache.items() 
                                     if k in current_theme_keys[:5]}  # Max 5 formats
            logger.debug(f"Cache formats nettoy√©: {len(self._text_format_cache)} formats restants")
        except Exception as e:
            logger.debug(f"Erreur nettoyage cache: {e}")

    def _get_cached_format(self, color: str) -> QTextCharFormat:
        """
        Obtient un format depuis le cache ou le cr√©e.
        Args:
            color (str): Couleur √† utiliser.
        Returns:
            QTextCharFormat: Format de texte PyQt5.
        """
        cache_key = f"{self.current_theme}_{color}"
        if cache_key not in self._text_format_cache:
            format_obj = QTextCharFormat()
            # Couleur unique selon le th√®me actuel
            if self.current_theme == 'hacker':
                format_obj.setForeground(QColor(0, 255, 0))  # Vert
            elif self.current_theme == 'clair':
                format_obj.setForeground(QColor(0, 0, 0))    # Noir
            else:  # sombre ou par d√©faut
                format_obj.setForeground(QColor(255, 255, 255))  # Blanc
            self._text_format_cache[cache_key] = format_obj
        return self._text_format_cache[cache_key]

    def _add_single_text(self, text: str, color: str = 'text') -> None:
        """
        Ajoute un texte unique imm√©diatement sans batching.
        Args:
            text (str): Texte √† ajouter.
            color (str): Couleur √† utiliser.
        Returns:
            None
        """
        if not self.terminal_output:
            return
        cursor = self.terminal_output.textCursor()
        cursor.movePosition(QTextCursor.End)
        format_obj = self._get_cached_format(color)
        cursor.setCharFormat(format_obj)
        cursor.insertText(text)
        self.terminal_output.setTextCursor(cursor)
        self.terminal_output.ensureCursorVisible()

    def append_text(self, text: str, color: str = 'text') -> None:
        """
        Ajoute du texte color√© au terminal avec gestionnaire m√©moire ultra.
        Args:
            text (str): Texte √† ajouter.
            color (str): Couleur √† utiliser.
        Returns:
            None
        """
        try:
            # Utiliser le gestionnaire m√©moire ultra pour le batching
            # Le gestionnaire ultra ne supporte que le texte simple, donc on formatera apr√®s
            should_flush = self.ultra_memory.add_to_buffer(text)
            # Stocker la couleur pour le flush
            if not hasattr(self, '_color_buffer'):
                self._color_buffer = []
            self._color_buffer.append(color)
            # Auto-flush si le buffer devient trop grand ou si demand√©
            if should_flush:
                self._ultra_flush_buffer()
        except Exception as e:
            # Fallback: ajout direct si probl√®me avec le gestionnaire m√©moire
            self._direct_append_text(text, color)
    
    def select_font(self) -> None:
        """
        Ouvre le dialogue de s√©lection de police.
        Returns:
            None
        """
        font, ok = QFontDialog.getFont(self.terminal_output.font(), self)
        if ok:
            self.terminal_output.setFont(font)
            # Sauvegarder la police s√©lectionn√©e
            self.settings_manager.save_setting('terminal_font', font.toString())
            logger.info(f"Police chang√©e: {font.family()} {font.pointSize()}pt")

    def show_checksum_calculator(self) -> None:
        """
        Affiche le calculateur de checksum.
        Returns:
            None
        """
        self.checksum_calculator.show()

    def show_data_converter(self) -> None:
        """
        Affiche le convertisseur de donn√©es.
        Returns:
            None
        """
        self.data_converter.show()

    def update_bytes_counter(self, sent: int = 0, received: int = 0) -> None:
        """
        Met √† jour le compteur d'octets de mani√®re cumulative.
        Args:
            sent (int): Octets envoy√©s √† ajouter.
            received (int): Octets re√ßus √† ajouter.
        Returns:
            None
        """
        try:
            self.tx_bytes_count += sent
            self.rx_bytes_count += received
            self.bytes_label.setText(f"Octets: {self.tx_bytes_count} ‚Üë / {self.rx_bytes_count} ‚Üì")
        except Exception as e:
            logger.error(f"Erreur mise √† jour compteur: {str(e)}")
    
    def load_settings(self) -> None:
        """
        Charge les param√®tres sauvegard√©s.
        Returns:
            None
        """
        try:
            settings = self.settings_manager.load_all_settings()
            if settings:
                # Appliquer le th√®me
                theme = settings.get('theme', 'sombre')
                if theme in ['clair', 'sombre', 'hacker']:
                    self.change_theme(theme)
                
                # Restaurer la g√©om√©trie de la fen√™tre
                if 'window_geometry' in settings:
                    self.restoreGeometry(settings['window_geometry'])
                
                # Restaurer la police du terminal
                if 'terminal_font' in settings:
                    font = QFont()
                    font.fromString(settings['terminal_font'])
                    self.terminal_output.setFont(font)
                
                # Restaurer la visibilit√© de l'onglet des param√®tres
                settings_tab_visible = settings.get('settings_tab_visible', False)  # D√©faut : masqu√©
                # Convertir en bool√©en si c'est une cha√Æne (probl√®me de s√©rialisation QSettings)
                if isinstance(settings_tab_visible, str):
                    settings_tab_visible = settings_tab_visible.lower() == 'true'
                
                logger.debug(f"Chargement param√®tres - settings_tab_visible: {settings_tab_visible} (type: {type(settings_tab_visible)})")
                self.settings_tab_visible = settings_tab_visible
                
                if settings_tab_visible:
                    # Ajouter l'onglet des param√®tres s'il doit √™tre visible
                    self.settings_tab_index = self.tab_widget.addTab(self.advanced_panel, "‚öôÔ∏è Param√®tres")
                    self.toggle_settings_tab_action.setChecked(True)
                    self.toggle_settings_tab_action.setText('Masquer l\'onglet param√®tres')
                else:
                    # L'onglet reste masqu√©
                    self.toggle_settings_tab_action.setChecked(False)
                    self.toggle_settings_tab_action.setText('Afficher l\'onglet param√®tres')
                
                # Restaurer la visibilit√© du panneau d'envoi
                send_panel_visible = settings.get('send_panel_visible', True)  # D√©faut : visible
                # Convertir en bool√©en si c'est une cha√Æne (probl√®me de s√©rialisation QSettings)
                if isinstance(send_panel_visible, str):
                    send_panel_visible = send_panel_visible.lower() == 'true'
                
                self.input_panel.setVisible(send_panel_visible)
                
                if send_panel_visible:
                    self.toggle_send_panel_action.setChecked(True)
                    self.toggle_send_panel_action.setText('Masquer le panneau d\'envoi')
                else:
                    self.toggle_send_panel_action.setChecked(False)
                    self.toggle_send_panel_action.setText('Afficher le panneau d\'envoi')
                
                logger.info("Param√®tres charg√©s avec succ√®s")
            else:
                # Premi√®re utilisation - valeurs par d√©faut
                self.settings_tab_visible = False
                self.toggle_settings_tab_action.setChecked(False)
                self.toggle_settings_tab_action.setText('Afficher l\'onglet param√®tres')
                
                # Panneau d'envoi visible par d√©faut
                if self.input_panel:
                    self.input_panel.setVisible(True)
                    self.toggle_send_panel_action.setChecked(True)
                    self.toggle_send_panel_action.setText('Masquer le panneau d\'envoi')
                
                logger.info("Premi√®re utilisation - param√®tres par d√©faut appliqu√©s")
                    
        except Exception as e:
            logger.error(f"Erreur lors du chargement des param√®tres: {str(e)}")
            # Appliquer le th√®me par d√©faut en cas d'erreur
            self.change_theme('sombre')
            # √âtat par d√©faut en cas d'erreur
            if not hasattr(self, 'settings_tab_visible'):
                self.settings_tab_visible = False
                self.toggle_settings_tab_action.setChecked(False)
                self.toggle_settings_tab_action.setText('Afficher l\'onglet param√®tres')
            
            # Panneau d'envoi visible par d√©faut en cas d'erreur
            if self.input_panel:
                self.input_panel.setVisible(True)
                self.toggle_send_panel_action.setChecked(True)
                self.toggle_send_panel_action.setText('Masquer le panneau d\'envoi')
    
    def save_settings(self) -> None:
        """
        Sauvegarde les param√®tres actuels.
        Returns:
            None
        """
        try:
            settings = {
                'window_geometry': self.saveGeometry(),
                'terminal_font': self.terminal_output.font().toString(),
                'theme': getattr(self, 'current_theme', 'sombre'),
                'settings_tab_visible': getattr(self, 'settings_tab_visible', False),
                'send_panel_visible': self.input_panel.isVisible() if self.input_panel else True
            }
            logger.debug(f"Sauvegarde param√®tres - settings_tab_visible: {settings['settings_tab_visible']} (type: {type(settings['settings_tab_visible'])})")
            self.settings_manager.save_all_settings(settings)
            logger.info("Param√®tres sauvegard√©s avec succ√®s")
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde des param√®tres: {str(e)}")
    
    def closeEvent(self, event: QCloseEvent) -> None:
        """
        G√®re la fermeture de l'application de mani√®re ultra-robuste avec nettoyage m√©moire complet.
        Args:
            event (QCloseEvent): √âv√©nement de fermeture de la fen√™tre.
        Returns:
            None
        """
        try:
            logger.info("Fermeture de l'application en cours...")
            # Arr√™t de tous les timers (y compris m√©moire)
            self._stop_all_timers_and_memory_cleanup()
            # 2. Flush final du buffer de texte
            try:
                if hasattr(self, '_pending_text_buffer') and self._pending_text_buffer:
                    self._flush_text_buffer()
                    logger.debug("Buffer de texte final flush√©")
            except Exception as e:
                logger.warning(f"Erreur flush final: {e}")
            
            # 3. Fermer les connexions s√©rie de mani√®re propre
            if hasattr(self, 'serial_manager') and self.serial_manager:
                try:
                    if self.serial_manager.is_connected():
                        logger.info("D√©connexion du port s√©rie...")
                        self.serial_manager.disconnect_port()
                        
                        # Attendre un peu pour la d√©connexion propre
                        from PyQt5.QtCore import QEventLoop, QTimer
                        loop = QEventLoop()
                        QTimer.singleShot(200, loop.quit)
                        loop.exec_()
                        
                except Exception as e:
                    logger.error(f"Erreur lors de la d√©connexion s√©rie: {str(e)}")
            
            # 4. Sauvegarder les param√®tres
            try:
                self.save_settings()
                logger.debug("Param√®tres sauvegard√©s")
            except Exception as e:
                logger.error(f"Erreur lors de la sauvegarde: {str(e)}")
            
            # 5. Fermer les fen√™tres des outils
            tools_to_close = []
            if hasattr(self, 'checksum_calculator') and self.checksum_calculator:
                tools_to_close.append(('checksum_calculator', self.checksum_calculator))
            if hasattr(self, 'data_converter') and self.data_converter:
                tools_to_close.append(('data_converter', self.data_converter))
                
            for tool_name, tool in tools_to_close:
                try:
                    if hasattr(tool, 'close'):
                        tool.close()
                        logger.debug(f"Outil {tool_name} ferm√©")
                except Exception as e:
                    logger.warning(f"Erreur fermeture {tool_name}: {e}")
            
            # 6. Nettoyage m√©moire ultra-complet
            try:
                # Vider et nettoyer le terminal
                if hasattr(self, 'terminal_output') and self.terminal_output:
                    self.terminal_output.clear()
                    self.terminal_output.deleteLater()
                    
                # Nettoyer les caches
                if hasattr(self, '_text_format_cache'):
                    self._text_format_cache.clear()
                if hasattr(self, '_pending_text_buffer'):
                    self._pending_text_buffer.clear()
                    
                # Nettoyer l'historique des commandes
                if hasattr(self, 'command_history'):
                    self.command_history.clear()
                    
                # Forcer le garbage collection multiple fois
                import gc
                for _ in range(3):
                    gc.collect()
                    
                logger.debug("Nettoyage m√©moire complet effectu√©")
                
            except Exception as e:
                logger.warning(f"Erreur lors du nettoyage final: {e}")
            
            event.accept()
            logger.info("Application ferm√©e proprement avec nettoyage complet")
            
        except Exception as e:
            logger.error(f"Erreur critique lors de la fermeture: {str(e)}")
            # En cas d'erreur critique, forcer la fermeture avec nettoyage d'urgence
            try:
                # Arr√™t d'urgence des timers
                if hasattr(self, 'port_timer'):
                    self.port_timer.stop()
                if hasattr(self, 'repeat_timer'):
                    self.repeat_timer.stop()
                if hasattr(self, '_update_timer'):
                    self._update_timer.stop()
                    
                # Nettoyage d'urgence
                import gc
                gc.collect()
            except:
                pass
            event.accept()
    
    def _stop_all_timers_and_memory_cleanup(self) -> None:
        """
        Arr√™te tous les timers (y compris m√©moire) et loggue l'√©tat pour robustesse maximale.
        """
        try:
            timers = []
            if hasattr(self, 'port_timer') and self.port_timer:
                timers.append(('port_timer', self.port_timer))
            if hasattr(self, 'repeat_timer') and self.repeat_timer:
                timers.append(('repeat_timer', self.repeat_timer))
            if hasattr(self, '_update_timer') and self._update_timer:
                timers.append(('update_timer', self._update_timer))
            if hasattr(self, '_ultra_flush_timer') and self._ultra_flush_timer:
                timers.append(('ultra_flush_timer', self._ultra_flush_timer))
            # Arr√™t du timer m√©moire si pr√©sent
            if hasattr(self, 'ultra_memory') and hasattr(self.ultra_memory, '_cleanup_timer'):
                timers.append(('memory_cleanup_timer', self.ultra_memory._cleanup_timer))
            for timer_name, timer in timers:
                try:
                    if timer.isActive():
                        timer.stop()
                        logger.debug(f"Timer {timer_name} arr√™t√©")
                except Exception as e:
                    logger.warning(f"Erreur arr√™t timer {timer_name}: {e}")
        except Exception as e:
            logger.error(f"Erreur lors de l'arr√™t des timers: {e}")

    def on_send_settings_changed(self, settings: Dict[str, Any]) -> None:
        """
        Traite les changements de param√®tres d'envoi.
        Args:
            settings (Dict[str, Any]): Param√®tres d'envoi modifi√©s.
        Returns:
            None
        """
        try:
            # ...traitement des param√®tres d'envoi...
            pass
        except Exception as e:
            logger.error(f"Erreur lors du changement des param√®tres d'envoi : {str(e)}")
            raise

    def on_display_settings_changed(self, settings: Dict[str, Any]) -> None:
        """
        Traite les changements de param√®tres d'affichage.
        Args:
            settings (Dict[str, Any]): Param√®tres d'affichage modifi√©s.
        Returns:
            None
        """
        try:
            # ...traitement des param√®tres d'affichage...
            pass
        except Exception as e:
            logger.error(f"Erreur lors du changement des param√®tres d'affichage : {str(e)}")
            raise

    def on_serial_settings_changed(self, settings: Dict[str, Any]) -> None:
        """
        Traite les changements de param√®tres s√©rie.
        Args:
            settings (Dict[str, Any]): Param√®tres s√©rie modifi√©s.
        Returns:
            None
        """
        try:
            # ...traitement des param√®tres s√©rie...
            pass
        except Exception as e:
            logger.error(f"Erreur lors du changement des param√®tres s√©rie : {str(e)}")
            raise
    
    def change_theme(self, theme_name: str) -> None:
        """
        Change le th√®me de l'application.
        Args:
            theme_name (str): Nom du th√®me √† appliquer.
        Returns:
            None
        """
        try:
            from interface.theme_manager import apply_theme
            apply_theme(theme_name)
            self.current_theme = theme_name
            # Appliquer les couleurs du terminal
            self.apply_terminal_colors()
            # Forcer la mise √† jour visuelle du terminal
            self.refresh_terminal_display()
            logger.info(f"Th√®me chang√©: {theme_name}")
        except Exception as e:
            logger.error(f"Erreur lors du changement de th√®me: {e}")

    def refresh_terminal_display(self) -> None:
        """
        Force la mise √† jour visuelle du terminal avec les nouvelles couleurs.
        Returns:
            None
        """
        try:
            # Sauvegarder le contenu actuel
            current_content = self.terminal_output.toPlainText()
            if current_content:
                # Effacer et r√©√©crire le contenu pour appliquer les nouvelles couleurs
                self.terminal_output.clear()
                # Ajouter un message de changement de th√®me
                self.append_text(f"[Syst√®me] Th√®me chang√© vers '{self.current_theme}'\n", 'system')
                # Note: Le contenu pr√©c√©dent est perdu mais c'est acceptable pour un changement de th√®me
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour du terminal: {e}")

    def apply_terminal_colors(self) -> None:
        """
        Applique les couleurs du terminal selon le th√®me actuel.
        Returns:
            None
        """
        try:
            if self.terminal_output:
                # D√©finir les couleurs selon le th√®me
                if self.current_theme == 'hacker':
                    text_color = "#00ff00"  # Vert
                    bg_color = "#000000"    # Noir
                elif self.current_theme == 'clair':
                    text_color = "#000000"  # Noir
                    bg_color = "#ffffff"    # Blanc
                else:  # sombre ou par d√©faut
                    text_color = "#ffffff"  # Blanc
                    bg_color = "#2a2a2a"    # Gris sombre
                style = f"""
                    QTextEdit {{
                        background-color: {bg_color};
                        color: {text_color};
                        border: 1px solid #555;
                        font-family: 'Consolas', 'Courier New', monospace;
                    }}
                """
                self.terminal_output.setStyleSheet(style)
                logger.debug(f"Couleurs appliqu√©es pour th√®me '{self.current_theme}': texte={text_color}, fond={bg_color}")
            else:
                logger.warning("terminal_output non initialis√©")
        except Exception as e:
            logger.error(f"Erreur lors de l'application des couleurs: {e}")

    def change_font(self) -> None:
        """
        Ouvre un dialogue pour changer la police du terminal.
        Returns:
            None
        """
        try:
            current_font = self.terminal_output.font() if self.terminal_output else QFont("Consolas", 10)
            font, ok = QFontDialog.getFont(current_font, self, "Choisir la police du terminal")
            if ok and self.terminal_output:
                self.terminal_output.setFont(font)
                logger.info(f"Police chang√©e: {font.family()}, taille: {font.pointSize()}")
        except Exception as e:
            logger.error(f"Erreur lors du changement de police: {str(e)}")

    def toggle_send_panel_visibility(self) -> None:
        """
        Masque ou affiche le panneau d'envoi.
        Returns:
            None
        """
        try:
            is_visible = self.input_panel.isVisible()
            self.input_panel.setVisible(not is_visible)
            # Mettre √† jour le texte de l'action
            if is_visible:
                self.toggle_send_panel_action.setText('Afficher le panneau d\'envoi')
            else:
                self.toggle_send_panel_action.setText('Masquer le panneau d\'envoi')
            # Sauvegarder les param√®tres
            self.save_settings()
            logger.info(f"Panneau d'envoi {'masqu√©' if is_visible else 'affich√©'}")
        except Exception as e:
            logger.error(f"Erreur lors du basculement du panneau d'envoi: {str(e)}")

    def toggle_settings_tab_visibility(self) -> None:
        """
        Masque ou affiche l'onglet des param√®tres.
        Returns:
            None
        """
        try:
            if self.settings_tab_visible and self.settings_tab_index is not None:
                # Masquer l'onglet des param√®tres
                self.tab_widget.removeTab(self.settings_tab_index)
                self.toggle_settings_tab_action.setText('Afficher l\'onglet param√®tres')
                self.toggle_settings_tab_action.setChecked(False)
                self.settings_tab_visible = False
                self.settings_tab_index = None
                logger.info("Onglet param√®tres masqu√©")
            else:
                # Afficher l'onglet des param√®tres
                self.settings_tab_index = self.tab_widget.addTab(self.advanced_panel, "‚öôÔ∏è Param√®tres")
                self.toggle_settings_tab_action.setText('Masquer l\'onglet param√®tres')
                self.toggle_settings_tab_action.setChecked(True)
                self.settings_tab_visible = True
                logger.info("Onglet param√®tres affich√©")
            # Sauvegarder les param√®tres
            self.save_settings()
        except Exception as e:
            logger.error(f"Erreur lors du basculement de l'onglet param√®tres: {str(e)}")

    def setupShortcuts(self) -> None:
        """
        Configure les raccourcis clavier.
        Returns:
            None
        """
        # Cette m√©thode est appel√©e dans __init__ mais n'√©tait pas d√©finie
        pass

    def reset_config(self) -> None:
        """
        R√©initialise l'apparence au th√®me par d√©faut.
        Returns:
            None
        """
        try:
            self.change_theme('sombre')
            if self.terminal_output:
                self.terminal_output.setFont(QFont("Consolas", 10))
            logger.info("Configuration r√©initialis√©e au th√®me sombre")
        except Exception as e:
            logger.error(f"Erreur lors de la r√©initialisation: {str(e)}")

    def apply_theme(self, theme_name: str) -> None:
        """
        Applique un th√®me √† l'application.
        Args:
            theme_name (str): Nom du th√®me √† appliquer.
        Returns:
            None
        """
        self.change_theme(theme_name)

    def _ultra_flush_buffer(self) -> None:
        """
        Flush ultra-optimis√© utilisant le gestionnaire m√©moire avanc√© avec gestion des couleurs.
        Returns:
            None
        """
        try:
            if hasattr(self, 'ultra_memory') and hasattr(self, 'terminal_output'):
                if self.terminal_output and hasattr(self, '_color_buffer'):
                    # Flush le buffer texte via le gestionnaire m√©moire ultra
                    self.ultra_memory.flush_buffer(self.terminal_output)
                    
                    # Nettoyer le buffer des couleurs
                    if hasattr(self, '_color_buffer'):
                        self._color_buffer.clear()
                    
                    # V√©rifier et nettoyer si n√©cessaire
                    stats = self.ultra_memory.get_memory_stats()
                    if stats['current_objects'] > 40:
                        logger.warning(f"Trop d'objets en m√©moire: {stats['current_objects']}")
                        self.ultra_memory.emergency_cleanup()
        except Exception as e:
            logger.error(f"Erreur dans _ultra_flush_buffer: {e}")

__all__ = []
